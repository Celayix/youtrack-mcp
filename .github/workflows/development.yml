name: Development

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches:
      - develop
      - 'feature/**'
      - 'hotfix/**'
      - 'bugfix/**'

jobs:
  pr-validation:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for comparison
        
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Validate PR title and description
      run: |
        echo "üìù Validating PR details..."
        
        # Check PR title format (basic validation)
        PR_TITLE="${{ github.event.pull_request.title }}"
        if [[ ${#PR_TITLE} -lt 10 ]]; then
          echo "‚ö†Ô∏è PR title seems too short: '$PR_TITLE'"
        else
          echo "‚úÖ PR title looks good: '$PR_TITLE'"
        fi
        
        # Check if description exists
        PR_BODY="${{ github.event.pull_request.body }}"
        if [[ ${#PR_BODY} -lt 20 ]]; then
          echo "‚ö†Ô∏è PR description is very short, consider adding more details"
        else
          echo "‚úÖ PR description provided"
        fi
        
    - name: Check for breaking changes
      run: |
        echo "üîç Checking for potential breaking changes..."
        
        # Check if tool signatures changed
        if git diff origin/${{ github.event.pull_request.base.ref }}..HEAD --name-only | grep -q "src/tools.ts"; then
          echo "‚ö†Ô∏è tools.ts modified - checking for breaking changes..."
          
          # Look for removed tools (basic check)
          git diff origin/${{ github.event.pull_request.base.ref }}..HEAD src/tools.ts > tools-diff.txt
          if grep -q "^-.*name:" tools-diff.txt; then
            echo "üö® Potential breaking change: Tool definitions may have been removed"
            echo "Please verify this is intentional and update version accordingly"
          else
            echo "‚úÖ No tools appear to have been removed"
          fi
        fi
        
    - name: Run tests on changed files
      run: |
        echo "üß™ Running focused tests..."
        
        # Get list of changed TypeScript files
        CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}..HEAD | grep '\.ts$' | tr '\n' ' ')
        
        if [ -n "$CHANGED_FILES" ]; then
          echo "Changed TypeScript files: $CHANGED_FILES"
          
          # Run TypeScript compilation check on changed files
          for file in $CHANGED_FILES; do
            if [ -f "$file" ]; then
              echo "Checking $file..."
              npx tsc --noEmit "$file"
            fi
          done
        else
          echo "No TypeScript files changed"
        fi
        
    - name: Build and test
      run: |
        npm run build
        npm test --if-present

  code-review-checks:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check code complexity
      run: |
        echo "üîç Analyzing code complexity..."
        
        # Simple complexity check using wc and grep
        for file in $(find src -name "*.ts" -type f); do
          lines=$(wc -l < "$file")
          functions=$(grep -c "function\|=>" "$file" || echo 0)
          
          if [ "$lines" -gt 500 ]; then
            echo "‚ö†Ô∏è Large file detected: $file ($lines lines)"
          fi
          
          if [ "$functions" -gt 20 ]; then
            echo "‚ö†Ô∏è Many functions in: $file ($functions functions)"
          fi
        done
        
        echo "‚úÖ Complexity check completed"
        
    - name: Check for TODOs and FIXMEs
      run: |
        echo "üìù Checking for TODOs and FIXMEs..."
        
        # Find TODO and FIXME comments
        TODO_COUNT=$(grep -r "TODO\|FIXME\|XXX\|HACK" src/ --include="*.ts" | wc -l || echo 0)
        
        if [ "$TODO_COUNT" -gt 0 ]; then
          echo "üìã Found $TODO_COUNT TODO/FIXME comments:"
          grep -r "TODO\|FIXME\|XXX\|HACK" src/ --include="*.ts" -n | head -10
          if [ "$TODO_COUNT" -gt 10 ]; then
            echo "... and $(($TODO_COUNT - 10)) more"
          fi
        else
          echo "‚úÖ No TODO/FIXME comments found"
        fi
        
    - name: Documentation completeness check
      run: |
        echo "üìö Checking documentation completeness..."
        
        # Check if new functions have documentation
        NEW_FUNCTIONS=$(git diff origin/${{ github.event.pull_request.base.ref }}..HEAD | grep "^+.*function\|^+.*async.*(" | wc -l || echo 0)
        NEW_DOCS=$(git diff origin/${{ github.event.pull_request.base.ref }}..HEAD | grep "^+.*\/\*\*\|^+.*\/\/" | wc -l || echo 0)
        
        echo "New functions added: $NEW_FUNCTIONS"
        echo "New documentation lines: $NEW_DOCS"
        
        if [ "$NEW_FUNCTIONS" -gt 0 ] && [ "$NEW_DOCS" -eq 0 ]; then
          echo "‚ö†Ô∏è New functions added but no documentation found"
          echo "Consider adding JSDoc comments for new functions"
        else
          echo "‚úÖ Documentation check passed"
        fi

  integration-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Test MCP server integration
      run: |
        echo "üîß Testing MCP server integration..."
        
        # Create a test script for MCP server validation
        cat > test-mcp-integration.js << 'EOF'
        const { spawn } = require('child_process');
        const fs = require('fs');
        
        console.log('üöÄ Starting MCP server integration test...');
        
        // Test 1: Server can start without crashing
        console.log('Test 1: Server startup test');
        try {
          const serverCode = fs.readFileSync('dist/index.js', 'utf8');
          
          // Basic sanity checks on the compiled code
          if (serverCode.includes('list_tools') && serverCode.includes('call_tool')) {
            console.log('‚úÖ MCP protocol methods found in compiled code');
          } else {
            console.error('‚ùå MCP protocol methods missing');
            process.exit(1);
          }
          
          if (serverCode.includes('youtrack') || serverCode.includes('YouTrack')) {
            console.log('‚úÖ YouTrack integration code found');
          } else {
            console.error('‚ùå YouTrack integration code missing');
            process.exit(1);
          }
          
        } catch (error) {
          console.error('‚ùå Failed to read compiled server:', error.message);
          process.exit(1);
        }
        
        // Test 2: Tool definitions are valid
        console.log('Test 2: Tool validation test');
        try {
          const toolsCode = fs.readFileSync('src/tools.ts', 'utf8');
          
          // Count tools
          const toolMatches = toolsCode.match(/name:\s*['"][^'"]+['"]/g);
          const toolCount = toolMatches ? toolMatches.length : 0;
          
          if (toolCount > 30) {
            console.log(`‚úÖ Found ${toolCount} tools defined`);
          } else {
            console.log(`‚ö†Ô∏è Only ${toolCount} tools found, expected more`);
          }
          
          // Check for state management tools
          const stateTools = ['complete_issue', 'start_working_on_issue', 'change_issue_state'];
          const foundStateTools = stateTools.filter(tool => toolsCode.includes(tool));
          
          if (foundStateTools.length === stateTools.length) {
            console.log('‚úÖ All state management tools found');
          } else {
            console.log(`‚ö†Ô∏è Missing state tools: ${stateTools.filter(t => !foundStateTools.includes(t)).join(', ')}`);
          }
          
        } catch (error) {
          console.error('‚ùå Failed to validate tools:', error.message);
          process.exit(1);
        }
        
        console.log('üéâ MCP server integration tests completed successfully!');
        EOF
        
        node test-mcp-integration.js
        
    - name: Test state management workflow
      run: |
        echo "üîÑ Testing state management workflow..."
        
        # Validate workflow documentation exists and has key content
        if [ -f "WORKFLOW_STATE_MANAGEMENT.md" ]; then
          echo "‚úÖ Workflow documentation found"
          
          # Check for key workflow tools
          required_tools=("complete_issue" "start_working_on_issue" "change_issue_state")
          for tool in "${required_tools[@]}"; do
            if grep -q "$tool" WORKFLOW_STATE_MANAGEMENT.md; then
              echo "‚úÖ Documentation includes $tool"
            else
              echo "‚ö†Ô∏è Documentation missing $tool"
            fi
          done
        else
          echo "‚ùå Workflow documentation missing"
          exit 1
        fi

  performance-check:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build and measure
      run: |
        echo "üìä Performance and size analysis..."
        
        # Build the project
        time npm run build
        
        # Check build output size
        if [ -d "dist" ]; then
          BUILD_SIZE=$(du -sh dist | cut -f1)
          echo "üì¶ Build output size: $BUILD_SIZE"
          
          # Check individual file sizes
          echo "üìã File sizes:"
          find dist -name "*.js" -exec ls -lh {} \; | awk '{print $5 " " $9}'
          
          # Check for very large files
          LARGE_FILES=$(find dist -name "*.js" -size +1M)
          if [ -n "$LARGE_FILES" ]; then
            echo "‚ö†Ô∏è Large files detected:"
            echo "$LARGE_FILES"
          else
            echo "‚úÖ No unusually large files found"
          fi
        fi
        
        # Check dependency count
        DEP_COUNT=$(cat package.json | jq '.dependencies | length' 2>/dev/null || echo "unknown")
        DEV_DEP_COUNT=$(cat package.json | jq '.devDependencies | length' 2>/dev/null || echo "unknown")
        
        echo "üì¶ Dependencies: $DEP_COUNT production, $DEV_DEP_COUNT development"
        
        # Memory usage estimation
        echo "üß† Estimating memory footprint..."
        node -e "
          console.log('Node.js heap size:', Math.round(process.memoryUsage().heapUsed / 1024 / 1024) + 'MB');
          console.log('RSS size:', Math.round(process.memoryUsage().rss / 1024 / 1024) + 'MB');
        "

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Security audit
      run: |
        echo "üîí Running security audit..."
        
        # Run npm audit
        if npm audit --audit-level moderate; then
          echo "‚úÖ No moderate+ security vulnerabilities found"
        else
          echo "‚ö†Ô∏è Security vulnerabilities detected - review required"
          # Don't fail the build for vulnerabilities in dev dependencies
        fi
        
    - name: Check for secrets in code
      run: |
        echo "üîç Scanning for potential secrets..."
        
        # Simple secret detection
        SECRET_PATTERNS=(
          "password.*="
          "token.*="
          "key.*="
          "secret.*="
          "api_key"
          "apikey"
          "auth.*="
        )
        
        SECRETS_FOUND=0
        for pattern in "${SECRET_PATTERNS[@]}"; do
          if grep -ri "$pattern" src/ --include="*.ts" --include="*.js" | grep -v "\.test\." | grep -v "example" | grep -v "TODO"; then
            SECRETS_FOUND=1
            echo "‚ö†Ô∏è Potential secret found matching pattern: $pattern"
          fi
        done
        
        if [ $SECRETS_FOUND -eq 0 ]; then
          echo "‚úÖ No obvious secrets found in code"
        else
          echo "üö® Potential secrets detected - please review"
          echo "Make sure all secrets are properly externalized to environment variables"
        fi
