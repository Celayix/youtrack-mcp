name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  build-and-validate:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint --if-present
      
    - name: Run type checking
      run: npx tsc --noEmit
      
    - name: Build project
      run: npm run build
      
    - name: Validate build output
      run: |
        echo "üîç Validating build output..."
        
        # Check that build output exists
        if [ ! -f "dist/index.js" ]; then
          echo "‚ùå Build output missing: dist/index.js"
          exit 1
        fi
        echo "‚úÖ Build output found"
        
        # Check for essential components in build
        essential_exports=("tools" "Server" "YouTrackClient")
        for export in "${essential_exports[@]}"; do
          if grep -q "$export" dist/index.js; then
            echo "‚úÖ $export found in build output"
          else
            echo "‚ùå Missing essential component: $export"
            exit 1
          fi
        done
        
    - name: Test MCP server startup
      run: |
        echo "üöÄ Testing MCP server startup..."
        # Test that the server can be imported without errors
        node -e "
          try {
            require('./dist/index.js');
            console.log('‚úÖ MCP server loads successfully');
          } catch (error) {
            console.error('‚ùå MCP server failed to load:', error.message);
            process.exit(1);
          }
        "

  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: |
        echo "üîí Running security audit..."
        npm audit --audit-level high

  project-validation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Validate project structure
      run: |
        echo "üìÅ Validating project structure..."
        
        # Check essential files exist
        required_files=(
          "package.json"
          "tsconfig.json" 
          "src/index.ts"
          "src/tools.ts"
          "src/youtrack-client.ts"
          "README.md"
        )
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file exists"
          else
            echo "‚ùå Missing required file: $file"
            exit 1
          fi
        done
        
    - name: Validate MCP protocol compliance
      run: |
        echo "üîç Validating MCP protocol compliance..."
        
        # Build first to check compiled output
        npm run build
        
        # Check for required MCP server methods in built output
        if grep -q "list_tools\|call_tool" dist/index.js; then
          echo "‚úÖ MCP protocol methods found"
        else
          echo "‚ùå Missing required MCP protocol methods"
          exit 1
        fi
        
    - name: Validate tool definitions
      run: |
        echo "üîß Validating tool definitions..."
        
        # Count tools defined in source
        tool_count=$(grep -c "name:" src/tools.ts || echo "0")
        echo "üìä Found $tool_count tools defined"
        
        if [ "$tool_count" -gt 50 ]; then
          echo "‚úÖ Comprehensive tool set confirmed ($tool_count tools)"
        elif [ "$tool_count" -gt 20 ]; then
          echo "‚úÖ Good tool coverage ($tool_count tools)"
        else
          echo "‚ö†Ô∏è Limited tool set ($tool_count tools) - expected more"
        fi
        
        # Check for key tool categories
        key_tools=("create_issue" "query_issues" "update_issue" "generate_gantt_chart")
        for tool in "${key_tools[@]}"; do
          if grep -q "$tool" src/tools.ts; then
            echo "‚úÖ Key tool '$tool' found"
          else
            echo "‚ö†Ô∏è Key tool '$tool' not found"
          fi
        done
        
    - name: Validate documentation
      run: |
        echo "üìö Validating documentation..."
        
        # Check README structure
        if grep -q "## " README.md; then
          echo "‚úÖ README has proper section structure"
        else
          echo "‚ùå README lacks proper structure"
          exit 1
        fi
        
        # Check for key documentation sections
        key_sections=("Quick Start" "Configuration" "Tools" "Usage")
        for section in "${key_sections[@]}"; do
          if grep -qi "$section" README.md; then
            echo "‚úÖ Section '$section' found in README"
          else
            echo "‚ö†Ô∏è Section '$section' missing from README"
          fi
        done
